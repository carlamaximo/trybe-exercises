// function division(x, y) {
//   return x / y;
// }

// const assert = require('assert');

// // declaraÃ§Ã£o da funÃ§Ã£o division, definida anteriormente...

// assert.strictEqual(division(10, 2), 5); // OK
// assert.strictEqual(division(10, 0), 0); // ðŸ’£

// const assert = require('assert');

// function division(x, y) {
//   if (y === 0) throw new Error ('parameter y must not be 0');
//   // Queremos que o cÃ³digo retorne um erro com uma mensagem especÃ­fica
//   // caso o parÃ¢metro y seja 0. Por isso lanÃ§amos uma exceÃ§Ã£o se essa condiÃ§Ã£o
//   // for verdadeira, o que irÃ¡ interromper a execuÃ§Ã£o da funÃ§Ã£o.

//   return x / y;
// }

// // declaraÃ§Ã£o da funÃ§Ã£o division, definida anteriormente...

// assert.strictEqual(division(10, 2), 5); // OK
// assert.strictEqual(division(10, 0), 0); // ðŸ’£

// Testando o TDD

const assert = require('assert');

const myFunction = () => {};

assert.strictEqual(typeof myFunction, 'function');